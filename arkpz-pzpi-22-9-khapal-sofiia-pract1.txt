Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії



Звіт
з практичної роботи №1
з дисципліни «Аналіз та рефакторинг коду»
з теми: «Основні рекомендації написання коду на обраній мові програмування»





Виконала:                                                                          Перевірив:
студентка групи ПЗПІ-22-9                                            ст. вк. Сокорчук І.П.
Хапаль С.Є.

Харків 2024
1 ОСНОВНІ РЕКОМЕНДАЦІЇ НАПИСАННЯ НА МОВІ ПРОГРАМУВАННЯ JAVA

2. Мета роботи
Ознайомити студентів з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчити аналізувати та рефакторити код для покращення його якості. 
3. Хід роботи
1. Для дослідження правил написання коду було обрано мову програмування Java. 
2. Нижче наведені рекомендації з прикладами коду:
Рекомендація 1: Дотримання стандартної структури каталогів у Java-проєктах.
Опис: Java-проєкти зазвичай організовані за стандартною структурою для зручності інтеграції з інструментами, такими як Maven або Gradle:
src/main/java — Основний код проєкту (класи та інтерфейси).
src/main/resources — Ресурси для додатка (конфігурації, шаблони).
src/test/java — Тести для основного коду.
src/test/resources — Ресурси, потрібні для тестів.
Ця структура полегшує навігацію та підтримку проєкту. Відхилення від неї може спричинити плутанину й ускладнити автоматизацію.
Приклад:
 
Рисунок 1 – Приклад стандартної структури проєкту
Рекомендація 2: Рекомендація: Розділення Java-проєкту на модулі та пакети за логікою та функціоналом.
Опис: Структура Java-проєкту повинна відповідати його функціональності, з розподілом на модулі та пакети:
-	Модулі — можуть бути реалізовані через Maven, Gradle або вручну, і виділяються для окремих функціональних частин великого проєкту.
-	Пакети — групують класи за їх функціональністю в межах кожного модуля.
Такий підхід робить код зрозумілим і легким для підтримки, особливо в великих проєктах, де окремі частини можуть розвиватися незалежно. Модульність сприяє повторному використанню коду й полегшує розширення функціоналу.
Рекомендація 3: Використання чіткого формату відступів у коді.
Опис: У Java стандартом є відступ у 4 пробіли (не табуляція), який відповідає ієрархії вкладеності коду. Кожен рівень вкладення відступається на 4 пробіли, що забезпечує узгодженість між розробниками та покращує читабельність коду. Це також уніфікує вигляд коду незалежно від редактора або IDE.
Приклад:
 
Рисунок 2 – Приклад дотримання відступів
Рекомендація 4: Дотримання обмеження довжини рядка коду до 80 символів.
Опис: У Java рядки коду не повинні перевищувати 80 символів. Якщо рядок довгий, його потрібно розбивати, використовуючи відступ у 8 пробілів для наступного рядка. Розрив варто виконувати перед операторами (+, -, *, &&), щоб зберегти логічну структуру.
Приклад:
 
Рисунок 3 – Приклад дотримання правильної довжини рядку

Рекомендація 5: Дотримання стандартів форматування коду для підвищення читабельності.
Опис: Змінні слід оголошувати та ініціалізувати на початку блоку, методи форматувати без пробілів між іменем та дужкою, параметри розділяти комами без пробілів, а оператори оточувати пробілами. Відкриваюча дужка має бути на одному рядку з заголовком блоку, а закриваюча — вирівнюватися з початком блоку. Оголошення властивостей класу слід робити по одному на рядок.
Приклад:
 
Рисунок 4 – Приклад правильного форматування коду
Рекомендація 6: Дотримання стандартів іменування змінних, констант, методів і класів у Java.
Опис: Змінні в Java зазвичай пишуться в верблюжому стилі (наприклад, userName, accountBalance), а константи — великими літерами з підкресленням (наприклад, MAX_LENGTH, DEFAULT_TIMEOUT). Імена методів також використовують верблюжий стиль і починаються з дієслів для опису дії (calculateTotal). Класи називають з великої літери, використовуючи іменники або їх комбінації, що чітко описує їхню роль.
Приклад:
 
Рисунок 5 – Правильне іменування констант, змінних, методів
Рекомендація 7: Використання коментарів для пояснення коду.
Опис: Коментарі роз'яснюють функціональність коду та спрощують його розуміння для інших розробників. Однорядкові коментарі (//) використовуються для коротких пояснень і розміщуються поруч із рядком коду або над ним. Багаторядкові коментарі (/* ... */) застосовують для більш детальних описів великих блоків коду.
Приклад:
 
Рисунок 6 – Приклад правильного використання коментарів
Рекомендація 8: Використання Javadoc для створення документації.
Опис: Javadoc — стандартний інструмент Java для генерації документації у вигляді HTML-файлів. Він дозволяє чітко описати класи, методи та поля за допомогою коментарів /** ... */, використовуючи теги @param, @return, @throws для пояснення параметрів, типу повернення і винятків.
Приклад:
 
Рисунок 7 – Приклад використання Javadoc
Рекомендація 9: Дотримання принципу єдиного призначення.
Опис: Принцип єдиного призначення означає, що кожен клас і метод повинні виконувати одне чітко визначене завдання. Це покращує зрозумілість, знижує залежності між компонентами й спрощує підтримку та модифікацію коду.
Приклад:
 
Рисунок 8 – Приклад методу з одним призначенням
Рекомендація 10: Оптимізація довжини методів.
Опис: Методи в Java повинні бути короткими і виконувати одне завдання. Оптимальною вважається довжина до 20-30 рядків коду. Якщо метод стає довшим, це може свідчити про потребу розділити його на менші функції.
Приклад:
 
Рисунок 9 – Приклад правильної довжини методу
Рекомендація 11: Використання інкапсуляції для захисту даних класу.
Опис: Інкапсуляція передбачає приховування внутрішніх деталей класу та надання доступу до даних лише через публічні методи. Це знижує ймовірність помилок і підвищує безпеку даних, дозволяючи контролювати їх зміни.
Приклад:
 
Рисунок 10 – Приклад дотримання інкапсуляції
Рекомендація 12: Використання винятків лише для обробки непередбачених помилкових ситуацій.
Опис: У Java винятки (перевірені та неперевірені) слід застосовувати для обробки помилок, а не для керування звичайним виконанням програми. Перевірені винятки, як-от IOException, вимагають обробки, тоді як неперевірені (NullPointerException) вказують на програмні помилки.
Приклад:
 
Рисунок 11 – Приклад використання вийнятків
Рекомендація 13: Використання специфічних винятків замість загальних у Java.
Опис: У Java доцільно використовувати специфічні винятки для різних ситуацій, а не загальний клас Exception. Специфічні винятки, як-от NoSuchFieldException (коли поле не знайдено) чи IllegalAccessException (коли доступ обмежений), дозволяють детальніше відображати природу помилки, що спрощує діагностику та виправлення.
Приклад:
 
Рисунок 12 – Приклад використання специфічних вийнятків
Рекомендація 14: Використання модульного тестування з бібліотеками JUnit і Mockito.
Опис: У Java для модульного тестування слід застосовувати JUnit для написання тестів і Mockito для імітації залежностей, щоб тестувати класи й методи в ізоляції від зовнішніх компонентів (наприклад, баз даних або веб-сервісів). Це дозволяє виявляти помилки на ранніх етапах розробки та спрощує налагодження.
Приклад:
 
Рисунок 13 – Приклад використання JUnit
Рекомендація 15: Створення тестів для обробки винятків у програмі.
Опис: Програма повинна мати окремі тести для перевірки коректної обробки винятків. У Java для цього використовуються інструменти, такі як JUnit, з анотаціями @Test(expected = Exception.class) або методом assertThrows, щоб переконатися, що виняток генерується в разі помилки.Тестування винятків забезпечує надійну реакцію програми на непередбачувані ситуації, підтримуючи стабільність і безперервну роботу.
Приклад:
 
Рисунок 14 – Приклад методу для тестування вийнятків
3. Створено презентацію (див. Додаток A), в якій висвітлено наступні правила:
	- організація проекту та файлів
- читабельність коду(відступи, довжина рядка, розташування блоків)
- іменування;
- коментування та документування;
- структура класів та методів;
- обробка помилок;
- тестування та оптимізація;
4. Оформлено звіт до практичного заняття.

4. Висновок:
У ході практичної роботи було успішно вивчено та застосовано правила написання якісного коду на прикладі мови програмування Java. Були створені кодові приклади для демонстрації основних принципів кодування, що сприяє кращому засвоєнню теоретичного матеріалу. Також було розроблено презентацію, яка містить ключові правила кодування, включаючи організацію проекту та файлів, покращення читабельності коду (відступи, довжина рядків, розташування блоків), іменування, коментування та документування, структуру класів і методів, обробку помилок, тестування та оптимізацію. Крім того, підготовлено звіт, що відображає виконану роботу в рамках практичного заняття.
Посилання на відео:
https://youtu.be/6OqdYZWZeuA 
Посилання на репозиторій з кодом: 
https://github.com/NureKhapalSofiia/arkpz-pzpi-22-9-khapal-sofiia/blob/Pract1/arkpz-pzpi-22-9-khapal-sofiia-pract1/arkpz-pzpi-22-9-khapal-sofiia-pract1.java
ВИКОРИСТАНІ ДЖЕРЕЛА

1.	https://www.oracle.com/technetwork/java/codeconventions-150003.pdf
2.	https://www.jetbrains.com/help/idea/code-style-java.html#javadoc
3.	https://www.cs.cornell.edu/courses/JavaAndDS/JavaStyle.html

ДОДАТОК А
Слайди презентації

 
Рисунок А.1 - Слайд «Тема презентації»

 
Рисунок А.2 - Слайд «Вступ»
 
Рисунок А.3 - Слайд «Організація проєкту та файлів»

 
Рисунок А.4 - Слайд «Структура проєкту»
 
Рисунок А.5 - Слайд «Логічний поділ на модулі та класи»

 
Рисунок А.6 - Слайд «Читабельність коду»
 
Рисунок А.7 - Слайд «Відступи»

 
Рисунок А.8 - Слайд «Довжина та перенос рядка»
 
Рисунок А.9 - Слайд «Розташування блоків, операторів, пробілів та дужок»

 
Рисунок А.10 - Слайд «Іменування»
 
Рисунок А.11 - Слайд «Іменування змінних, констант, методів і класів»

 
Рисунок А.12 - Слайд «Коментування да документування»
 
Рисунок А.13 - Слайд «Оформлення коментарів»

 
Рисунок А.14 - Слайд «Документування (Javadoc)»
 
Рисунок А.15 - Слайд «Структура класів та методів»

 
Рисунок А.16 - Слайд «Принцип єдиного призначення»
 
Рисунок А.17 - Слайд «Довжина методів»

 
Рисунок А.18 - Слайд «Інкапсуляція»
 
Рисунок А.19 - Слайд «Обробка помилок»

 
Рисунок А.20 - Слайд «Використання винятків»
 
Рисунок А.21 - Слайд «Специфічність винятків»

 
Рисунок А.22 - Слайд «Тестування та оптимізація»
 
Рисунок А.23 - Слайд «Модульне тестування»

 
Рисунок А.24 - Слайд «Тестування вийнятків»
 
Рисунок А.25 - Слайд «Висновки»

 
Рисунок А.26 - Слайд «Дякую за увагу»
